// <auto-generated />
using System;
using LocationTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LocationTracker.Migrations
{
    [DbContext(typeof(TrackerContext))]
    partial class TrackerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LocationTracker.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasMaxLength(50);

                    b.Property<string>("FirstAddress")
                        .HasColumnName("address_1")
                        .HasMaxLength(50);

                    b.Property<float?>("Lattitude")
                        .HasColumnName("lattitude");

                    b.Property<float?>("Longitude")
                        .HasColumnName("longitude");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(10);

                    b.Property<string>("SecondAddress")
                        .HasColumnName("address_2")
                        .HasMaxLength(50);

                    b.Property<string>("StateProvince")
                        .HasColumnName("state_province")
                        .HasMaxLength(50);

                    b.HasKey("AddressID");

                    b.ToTable("address");
                });

            modelBuilder.Entity("LocationTracker.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<int>("LocationID")
                        .HasColumnName("location_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<int>("StatusID")
                        .HasColumnName("status_id");

                    b.Property<bool?>("StudyRequired")
                        .HasColumnName("study_required");

                    b.Property<int>("VendorID")
                        .HasColumnName("vendor_id");

                    b.HasKey("AssessmentID");

                    b.HasIndex("LocationID");

                    b.HasIndex("StatusID");

                    b.HasIndex("VendorID");

                    b.ToTable("assessment");
                });

            modelBuilder.Entity("LocationTracker.Models.BusinessUnit", b =>
                {
                    b.Property<int>("BusinessUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessUnitName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int>("DivisionID")
                        .HasColumnName("division_id");

                    b.HasKey("BusinessUnitID");

                    b.HasIndex("BusinessUnitName")
                        .IsUnique();

                    b.HasIndex("DivisionID");

                    b.ToTable("business_unit");
                });

            modelBuilder.Entity("LocationTracker.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlphaThree")
                        .IsRequired()
                        .HasColumnName("iso_alpha_3")
                        .HasMaxLength(3);

                    b.Property<string>("AlphaTwo")
                        .IsRequired()
                        .HasColumnName("iso_alpha_2")
                        .HasMaxLength(2);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("CountryID");

                    b.HasIndex("AlphaThree")
                        .IsUnique();

                    b.HasIndex("AlphaTwo")
                        .IsUnique();

                    b.ToTable("country");
                });

            modelBuilder.Entity("LocationTracker.Models.Division", b =>
                {
                    b.Property<int>("DivisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("DivisionID");

                    b.HasIndex("DivisionName")
                        .IsUnique();

                    b.ToTable("division");
                });

            modelBuilder.Entity("LocationTracker.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID")
                        .HasColumnName("address_id");

                    b.Property<int?>("BusinessUnitID")
                        .HasColumnName("business_unit_id");

                    b.Property<int?>("DivisionID")
                        .HasColumnName("division_id");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnName("location_code")
                        .HasMaxLength(3);

                    b.HasKey("LocationID");

                    b.HasIndex("AddressID")
                        .IsUnique();

                    b.HasIndex("BusinessUnitID");

                    b.HasIndex("DivisionID");

                    b.HasIndex("LocationCode")
                        .IsUnique();

                    b.ToTable("location");
                });

            modelBuilder.Entity("LocationTracker.Models.LocationStudy", b =>
                {
                    b.Property<int>("StudyID")
                        .HasColumnName("study_id");

                    b.Property<int>("LocationID")
                        .HasColumnName("location_id");

                    b.HasKey("StudyID", "LocationID");

                    b.HasIndex("LocationID");

                    b.ToTable("location_study");
                });

            modelBuilder.Entity("LocationTracker.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("StatusID");

                    b.ToTable("status");
                });

            modelBuilder.Entity("LocationTracker.Models.Study", b =>
                {
                    b.Property<int>("StudyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudyName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int?>("StudySize")
                        .HasColumnName("size");

                    b.HasKey("StudyID");

                    b.ToTable("study");
                });

            modelBuilder.Entity("LocationTracker.Models.StudyHistory", b =>
                {
                    b.Property<int>("StudyHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<string>("PerformedBy")
                        .HasColumnName("performed_by");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<int>("StatusID")
                        .HasColumnName("status_id");

                    b.Property<int>("StudyID")
                        .HasColumnName("study_id");

                    b.Property<int>("StudyTypeID")
                        .HasColumnName("study_type_id");

                    b.HasKey("StudyHistoryID");

                    b.HasIndex("StatusID");

                    b.HasIndex("StudyID");

                    b.HasIndex("StudyTypeID");

                    b.ToTable("study_history");
                });

            modelBuilder.Entity("LocationTracker.Models.StudyResult", b =>
                {
                    b.Property<int>("StudyResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArcFlashIssues")
                        .HasColumnName("arc_flash_issues");

                    b.Property<DateTime?>("DateCompleted")
                        .IsRequired()
                        .HasColumnName("date_completed");

                    b.Property<int>("EquipmentProtectionIssues")
                        .HasColumnName("equipment_protection_issues");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("StatusID");

                    b.Property<int>("StudyID")
                        .HasColumnName("study_id");

                    b.Property<int>("StudyTypeID");

                    b.Property<int>("UnderratedIssues")
                        .HasColumnName("underrated_issues");

                    b.HasKey("StudyResultID");

                    b.HasIndex("StudyID");

                    b.ToTable("study_result");
                });

            modelBuilder.Entity("LocationTracker.Models.StudyType", b =>
                {
                    b.Property<int>("StudyTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StudyTypeName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.HasKey("StudyTypeID");

                    b.ToTable("study_type");
                });

            modelBuilder.Entity("LocationTracker.Models.Subdivision", b =>
                {
                    b.Property<int>("SubdivisionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlphaTwo")
                        .IsRequired()
                        .HasColumnName("iso_alpha_2")
                        .HasMaxLength(2);

                    b.Property<int>("CountryID")
                        .HasColumnName("country_id");

                    b.Property<string>("SubdivisionName")
                        .IsRequired()
                        .HasColumnName("name");

                    b.HasKey("SubdivisionID");

                    b.HasIndex("AlphaTwo")
                        .IsUnique();

                    b.HasIndex("CountryID");

                    b.ToTable("subdivision");
                });

            modelBuilder.Entity("LocationTracker.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50);

                    b.Property<int>("VendorNumber")
                        .HasColumnName("number");

                    b.HasKey("VendorID");

                    b.ToTable("vendor");
                });

            modelBuilder.Entity("LocationTracker.Models.Assessment", b =>
                {
                    b.HasOne("LocationTracker.Models.Location", "Location")
                        .WithMany("Assessments")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LocationTracker.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LocationTracker.Models.Vendor", "Vendor")
                        .WithMany("Assessments")
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LocationTracker.Models.BusinessUnit", b =>
                {
                    b.HasOne("LocationTracker.Models.Division", "Division")
                        .WithMany("BusinessUnits")
                        .HasForeignKey("DivisionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LocationTracker.Models.Location", b =>
                {
                    b.HasOne("LocationTracker.Models.Address", "Address")
                        .WithOne("Location")
                        .HasForeignKey("LocationTracker.Models.Location", "AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LocationTracker.Models.BusinessUnit", "BusinessUnit")
                        .WithMany("Locations")
                        .HasForeignKey("BusinessUnitID");

                    b.HasOne("LocationTracker.Models.Division", "Division")
                        .WithMany("Locations")
                        .HasForeignKey("DivisionID");
                });

            modelBuilder.Entity("LocationTracker.Models.LocationStudy", b =>
                {
                    b.HasOne("LocationTracker.Models.Location", "Location")
                        .WithMany("LocationStudies")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LocationTracker.Models.Study", "Study")
                        .WithMany("LocationStudies")
                        .HasForeignKey("StudyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LocationTracker.Models.StudyHistory", b =>
                {
                    b.HasOne("LocationTracker.Models.Status", "Status")
                        .WithMany("StudyHistories")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LocationTracker.Models.Study", "Study")
                        .WithMany("StudyHistory")
                        .HasForeignKey("StudyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LocationTracker.Models.StudyType", "StudyType")
                        .WithMany("StudyHistories")
                        .HasForeignKey("StudyTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LocationTracker.Models.StudyResult", b =>
                {
                    b.HasOne("LocationTracker.Models.Study", "Study")
                        .WithMany("StudyResults")
                        .HasForeignKey("StudyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LocationTracker.Models.Subdivision", b =>
                {
                    b.HasOne("LocationTracker.Models.Country", "Country")
                        .WithMany("Subdivisions")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
